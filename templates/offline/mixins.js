var Init={beforeCreate(){Vue.prototype.$global=new Vue({data:{state:{}}})}};let u={color:{},math:{},array:{},string:{},state:{},other:{}};const setCssVariable=(key,value,el=document.body.style)=>el.setProperty(key,value);u.color.color=`\n\n\`color('name')\`\n\nReturns a color value. If \`name\` matches one of framework colors, framework color value is returned. If not, a standard CSS color name is returned.\n\n#### Example\n\n    color('red')\n    color('rebeccapurple')\n\n#### Output\n\n    {{ color('red') }}\n    {{ color('rebeccapurple')}}\n\n`;u.color.rgb=`\n\n\`rgb(r, g, b, a = false)\`\n\nOutputs a CSS \`rgba()\` string\n\n#### Example\n\n    rgb(50,100,50,0.5)\n    rgb(50,100,50)\n\n#### Output\n\n    {{ rgb(50,100,50,0.5) }}\n    {{ rgb(50,100,50) }}\n\n`;u.color.hsl=`\n\n\`hsl(h, s = 100, l = 50, a = 1)\`\n\nOutputs a CSS \`hsla()\` string\n\n#### Example\n\n    hsl(50,100,50,0.5)\n    hsl(50,100,50)\n    hsl(50)\n\n#### Output\n\n    {{ hsl(50,100,50,0.5) }}\n    {{ hsl(50,100,50) }}\n    {{ hsl(50) }}\n\n`;u.math.scale=`\n\n\`scale(value, start1, stop1, start2 = -2, stop2 = 2)\`\n\nScales linearily the input \`value\`\nfrom the input range between \`start1\` and \`stop1\`\nto the output range  \`start2\` and \`stop2\`.\n\n#### Example\n\n    scale(50, 0, 100, 0, 1)\n\n#### Output\n\n    {{ scale(50, 0, 100, 0, 1) }}\n\n`;u.math.round=`\n\n\`round(value, decimals = 0)\`\n\nRounds a number \`value\` to optional \`decimals\`.\n\nExample\n    \n    round(0.1234)\n    round(0.1234, 2)\n\nOutput\n  \n    {{ round(0.1234) }}\n    {{ round(0.1234, 2) }}\n\n`;u.string.trunc=`\n\n\`trunc(value, count)\`\n\nTruncates a \`value\` to \`count\` characters.\n\nExample\n    \n    trunc('Hello', 4)\n    trunc(Math.PI, 4)\n\nOutput\n  \n    {{ trunc('Hello', 4) }}\n    {{ trunc(Math.PI, 4) }}\n\n`;u.math.random=`\n\n\`random(from, to, float = false)\`\n\nGenerates a random integer number between \`from\` and \`to\`. \nIf \`float = true\`, the output value will be floating point number.\n\nExample\n    \n    random(0, 2)\n    random(0, 2, true)\n\nOutput\n  \n    {{ random(0, 2) }}\n    {{ random(0, 2, true) }}\n`;u.math.range=`\n\n\`range(from, to, step = 1)\`\n\nGenerates an array of integer numbers in between \`from\` and \`to\` with optional \`step\` parameter.\n\nExample\n\n    range(-1, 1, 0.5)\n\nOutput\n\n    {{ range(-1, 1, 0.5) }}\n\n`;u.math.polarx=`\n\n\`polarx(angle, radius = 1)\`\n\nGiven the polar coordinates \`angle radius\`, return cartesian coordinates \`x y\`.\n\n#### Example\n\n    polarx(90, 10)\n\n#### Output\n\n    {{ polarx(90, 10) }}\n\n`;u.math.polarx=`\n\n\`polary(angle, radius = 1)\`\n\nGiven the polar coordinates \`angle radius\`, return cartesian coordinates \`x y\`.\n\n#### Example\n\n    polary(90, 10)\n\n#### Output\n\n    {{ polary(90, 10) }}\n\n`;u.math.polarpoints=`\n\n\`polarpoints(count = 6, radius = 1)\`\n\nCalculates \`count\` of \`{ x, y }\` points on the circle.\n\n#### Example\n\n    polarpoints(4,10)\n\n#### Output\n\n    {{ polarpoints(4,10) }}\n`;u.math.deg2rad=`\n\n\`deg2rad(angle)\`\n\nConverts angle in degrees to radians.\n\n#### Example\n\n<f-math>\nradians = \\frac{degrees \\cdot \\pi}{180} = \\frac{180 \\cdot \\pi}{180} = \\pi\n</f-math>\n\n    deg2rad(180)\n\n#### Output\n\n    {{ deg2rad(180) }}\n`;u.math.rad2deg=`\n\n\`rad2deg(angle)\`\n\nConverts angle in radians to degrees.\n\n#### Example\n\n    rad2deg(Math.PI)\n\n#### Output\n\n    {{ rad2deg(Math.PI) }}\n`;u.array.shuffle=`\n\n\`shuffle(array)\`\n\nSorts the array in random order.\n\n#### Example\n\n    shuffle(range(0,3))\n\n#### Output\n\n    {{ shuffle(range(0,3)) }}\n\n`;u.array.any=`\n\n\`any(array)\`\n\nPicks a random element from the array.\nSupports both array and function argument syntax.\n\n#### Example\n\n    any([0,1,2])\n    any(0,1,2)\n\n#### Output\n\n    {{ any([0,1,2]) }}\n    {{ any(0,1,2) }}\n\n`;u.array.flatten=`\n\n\`flatten(array)\`\n\nFlattens multidimensional array\n\n#### Example\n\n    flatten([0,1,[2,[3,4]]])\n\n#### Output\n\n    {{ flatten([0,1,[2,[3,4]]]) }}\n\n`;u.array.chunk=`\n\n\`chunk(array, length)\`\n\nChunks array into smaller \`length\`-sizeu.arrays\n\n#### Example\n\n    chunk([0,1,2,3],2)\n\n#### Output\n\n    {{ chunk([0,1,2,3],2) }}\n\n`;u.array.unique=`\n\n\`unique(array)\`\n\nRemoves duplicates from the array\n\n#### Example\n\n    unique([0,0,1,2])\n\n#### Output\n\n    {{ unique([0,0,1,2]) }}\n\n`;u.string.titleCase=`\n\n\`titleCase(string)\`\n\nConverts string to **Title Case**\n\n#### Example\n\n    titleCase('das ist wunderbar')\n\n#### Output\n\n    {{ titleCase('das ist wunderbar') }}\n\n`;u.string.kebabCase=`\n\n\`kebabCase(string)\`\n\nConverts string to **kebab-case**\n\n#### Example\n\n    kebabCase('DonnerWetter')\n\n#### Output\n\n    {{ kebabCase('DonnerWetter') }}\n\n`;u.string.join=`\n\n\`join(value1, value2, value3)\`\n\nJoins a set of values to a space-separated string, useful for A-Frame integration.\n\n#### Input\n\n    join([1,2,3])\n    join(4,5,6)\n\n#### Output\n\n    {{ join([1,2,3]) }}\n    {{ join(4,5,6) }}\n\n`;u.state.send=`\n\n\`send(name, value)\`\n\nDescription to be written.\n\n`;u.state.receive=`\n\n\`receive(name, callback)\`\n\nDescription to be written.\n\n`;u.state.get=`\n\n\`get(key, default = null)\`\n\nDescription to be written.\n\n`;u.state.set=`\n\n\`set(key, value)\`\n\nDescription to be written.\n\n`;u.other.debounce=`\n\n\`debounce = (fn, time)\`\n\nDescription to be written.\n\n`;u.other.snapToGrid=`\n\n\`snapToGrid(value, gridsize)\`\n\nReturns the value in the closest point of 2D grid.\n\n#### Input\n\n    snapToGrid(0.51,0.5)\n\n#### Output\n\n    {{ snapToGrid(0.51,0.5) }}\n`;u.other.log=`\n\n\`log(message)\`\n\nLogs a value from a template to the console\n\n`;const coordsTextToArray=text=>{return text.split(",").map(t=>t.trim().replace(/\s+/g," ").split(" ").map(c=>parseFloat(c)))};const coordsArrayToObject=array=>{return array.map(a=>({x:a[0],y:a[1]||0,z:a[2]||0}))};const parseCoords=c=>{if(typeof c=="string"){return coordsArrayToObject(coordsTextToArray(c))}if(Array.isArray(c)){return coordsArrayToObject(c)}if(!Array.isArray(c)&&typeof c=="object"){return c}return null};var Css={created(){if(this.$options.css){const el=document.createElement("style");el.innerHTML=this.$options.css;document.querySelector("head").appendChild(el)}if(this.$options.cssprops){Object.entries(this.$options.cssprops).forEach(([key,value])=>{setCssVariable(key,value.default)})}}};var Object2d={methods:{parseTransform(transform){if(typeof transform=="string"){return parseCoords(transform)}if(Array.isArray(transform)&&transform.length){return transform.map(c=>parseCoords(c))}return transform}},computed:{positionTransform(){if(typeof this.position=="string"){this.position=this.parseTransform(this.position)[0]}return`translate(${this.position.x||0} ${this.position.y||0})`},rotationTransform(){if(typeof this.rotation=="string"){this.rotation=this.parseTransform(this.rotation)[0]}return`rotate(${this.rotation.x||this.rotation.y||this.rotation.z||0})`},scaleTransform(){if(typeof this.scale=="string"){this.scale=this.parseTransform(this.scale)[0]}return`scale(${this.scale.x||1,this.scale.y||this.scale.x||1})`},transform(){return`${this.positionTransform} ${this.rotationTransform} ${this.scaleTransform}`}}};export{Init,Css,Object2d};
